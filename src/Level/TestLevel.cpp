#include <stdio.h>
#include <stdlib.h>
#include "TestLevel.h"
#include "../Entity/TestEntity.h"
#include "../ShapeRenderer.h"
#include <avr/pgmspace.h>

const uint32_t testshape[] PROGMEM = {
    0b00000000000000000000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000001100000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000011000000000000000011000000,
    0b00000011000000000000000011000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000110000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000001100000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
    0b00000011000000000000000011000000,
    0b00000011000000000000000011000000,
    0b00000000000000000000000000000000,
    0b00000000000000000000000000000000,
};

ShapeRenderer sr;
float r = 0;

void TestLevel::render(MI0283QT9 *tft) {
    float oldr = r;
    r += 0.1f;
    if(r > 100) r-=100;
    sr.render(tft, (uint32_t *)testshape, RGB(255,255,255), 60,60 , oldr, 60, 60 , r);
}

TestLevel::TestLevel(Game *game) : Level(game) {
    testEntity_ = new TestEntity(game);
}

TestLevel::~TestLevel()
{
    delete testEntity_;
}
void TestLevel::update() {
    testEntity_->update(0.16f);
}

