#include <stdio.h>
#include <stdlib.h>
#include "TestLevel.h"
#include "../Entity/TestEntity.h"
#include "../ShapeRenderer.h"
#include <avr/pgmspace.h>

//const uint32_t testshape[] PROGMEM = {
//    0b00000000000000000000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000001100000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000011000000000000000011000000,
//    0b00000011000000000000000011000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000110000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000001100000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000000000000000000000,
//    0b00000011000000000000000011000000,
//    0b00000011000000000000000011000000,
//    0b00000000000000000000000000000000,
//    0b00000000000000000000000000000000,
//};

const uint16_t testshape[] PROGMEM = {
    0b0000000000000000,
    0b0000000000000000,
    0b0000000110000000,
    0b0000001111000000,
    0b0000001001000000,
    0b0000010000100000,
    0b0000010000100000,
    0b0000100000010000,
    0b0000100000010000,
    0b0001000000001000,
    0b0001000000001000,
    //0b0010001110000100,
    0b0001111011111000,
    //0b0011111011111100,
    0b0001100000111000,
    0b0000000000000000,
    0b0000000000000000,
    0b0000000000000000,
};
ShapeRenderer sr;
float r = 0;
float xx = 0;
void TestLevel::render(TFT *tft) {
    float oldr = r;
    float oldx = xx;
    r += game->nunchuck->joystick().x / 10;
    xx += game->nunchuck->joystick().y;

    sr.render(tft, (ShapeBuffer *)testshape, RGB(255,255,255), 60,oldx , oldr, 60, xx , r);
    sr.render(tft, (ShapeBuffer *)testshape, RGB(255,255,255), 160,160 , oldr, 160, 160 , r);
}

TestLevel::TestLevel(Game *game) : Level(game) {
    testEntity_ = new TestEntity(game);
}

TestLevel::~TestLevel()
{
    delete testEntity_;
}
void TestLevel::update() {
    testEntity_->update(0.16f);
}

